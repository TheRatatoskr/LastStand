//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""ActionSceneControls"",
            ""id"": ""53dfb398-9cce-4727-b3a2-0abd08096360"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d6b46d24-1ff9-4776-bc6e-9af966010e5f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""eda0a72a-db25-4228-a30f-f6d374881c43"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c76ded7c-2fb0-469b-b419-8bda7e6cf0be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dfddb71f-e976-4239-a7ad-0a2e39216ee2"",
                    ""path"": ""<DualShockGamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee573fa4-737a-413f-a81f-1ef3f19ea8f2"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb13218a-27fe-43ae-b7a7-38ecd808ee01"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PS5"",
            ""bindingGroup"": ""PS5"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ActionSceneControls
        m_ActionSceneControls = asset.FindActionMap("ActionSceneControls", throwIfNotFound: true);
        m_ActionSceneControls_Movement = m_ActionSceneControls.FindAction("Movement", throwIfNotFound: true);
        m_ActionSceneControls_Attack = m_ActionSceneControls.FindAction("Attack", throwIfNotFound: true);
        m_ActionSceneControls_Jump = m_ActionSceneControls.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionSceneControls
    private readonly InputActionMap m_ActionSceneControls;
    private List<IActionSceneControlsActions> m_ActionSceneControlsActionsCallbackInterfaces = new List<IActionSceneControlsActions>();
    private readonly InputAction m_ActionSceneControls_Movement;
    private readonly InputAction m_ActionSceneControls_Attack;
    private readonly InputAction m_ActionSceneControls_Jump;
    public struct ActionSceneControlsActions
    {
        private @PlayerInput m_Wrapper;
        public ActionSceneControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_ActionSceneControls_Movement;
        public InputAction @Attack => m_Wrapper.m_ActionSceneControls_Attack;
        public InputAction @Jump => m_Wrapper.m_ActionSceneControls_Jump;
        public InputActionMap Get() { return m_Wrapper.m_ActionSceneControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionSceneControlsActions set) { return set.Get(); }
        public void AddCallbacks(IActionSceneControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionSceneControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionSceneControlsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IActionSceneControlsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IActionSceneControlsActions instance)
        {
            if (m_Wrapper.m_ActionSceneControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionSceneControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionSceneControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionSceneControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionSceneControlsActions @ActionSceneControls => new ActionSceneControlsActions(this);
    private int m_PS5SchemeIndex = -1;
    public InputControlScheme PS5Scheme
    {
        get
        {
            if (m_PS5SchemeIndex == -1) m_PS5SchemeIndex = asset.FindControlSchemeIndex("PS5");
            return asset.controlSchemes[m_PS5SchemeIndex];
        }
    }
    public interface IActionSceneControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
